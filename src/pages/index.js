import { size } from "lodash";
import Head from "next/head";
import BookCard from "../components/BookCard";
import { client } from "../gql/apolloClient";
import { GET_ALL_BOOKS } from "../gql/queries";
import PropTypes from "prop-types";

export default function Home({ books }) {
  console.log(books);
  return (
    <>
      <Head>
        <title>Books | Search</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      {size(books) > 0 ? (
        <>
          <div className="grid grid-cols-3 container mx-auto max-md:grid-cols-2 max-sm:grid-cols-1">
            {books.map((book, index) => (
              <BookCard book={book} key={index} />
            ))}
          </div>
        </>
      ) : (
        <p className="text-center">No Books Found!!</p>
      )}
    </>
  );
}

export async function getServerSideProps(context) {
  const { query } = context;
  try {
    const { data } = await client.query({
      query: GET_ALL_BOOKS,
      variables: {
        term: query.term ? query.term : "",
        start: parseInt(
          query.index === "1" ? query.index : (query.index - 1) * 10
        ),
        filter: query.filter ? query.filter : "",
      },
    });
    return {
      props: {
        books: data.searchBooks,
      },
    };
  } catch (error) {
    console.log(error);
    return {
      props: {
        books: null,
      },
    };
  }
}

Home.PropTypes = {
  book: PropTypes.shape({
    id: PropTypes.string,
    saleInfo: PropTypes.shape({
      isEbook: PropTypes.bool,
      saleability: PropTypes.string,
    }),
    volumeInfo: PropTypes.shape({
      title: PropTypes.string,
      publisher: PropTypes.string,
      publishedDate: PropTypes.string,
      averageRating: PropTypes.number,
      imageLinks: PropTypes.shape({
        thumbnail: PropTypes.string,
      }),
      authors: PropTypes.arrayOf(PropTypes.string),
    }),
  }),
};
